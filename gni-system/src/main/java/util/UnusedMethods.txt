----- API -----

/**
     * Creates a callbackBuilder for the request so that the result can be sent back to the request source and then
     * calls the exception handler for the request.
     * @param callback Used to send the result of the request back to the request source.
     * @param pinCardJson Json String representing a {@link PinCard} that is to be removed from the system.
     * @param cookie Cookie of the user that sent the request.
     */
    @RequestMapping(value = "/card/remove", method = RequestMethod.PUT)
    public void processPinCardRemoval(final Callback<String> callback,
                                      @RequestParam("pinCard") final String pinCardJson,
                                      @RequestParam("cookie") final String cookie) {
        final CallbackBuilder callbackBuilder = CallbackBuilder.newCallbackBuilder().withStringCallback(callback);
        handlePinCardRemovalExceptions(pinCardJson, cookie, callbackBuilder);
    }

    /**
     * Tries to verify the input of the request and then forward the pin card removal request to the Authentication
     * Service, rejects the request if an exception occurs.
     * @param pinCardJson Json String representing a {@link PinCard} that is to be removed from the system.
     * @param cookie Cookie of the user that sent the request.
     * @param callbackBuilder Used to send the result of the request back to the request source.
     */
    private void handlePinCardRemovalExceptions(final String pinCardJson, final String cookie,
                                                final CallbackBuilder callbackBuilder) {
        try {
            verifyPinCardRemovalInput(pinCardJson);
            doPinCardRemovalRequest(pinCardJson, cookie, callbackBuilder);
        } catch (IncorrectInputException e) {
            System.out.printf("%s %s", PREFIX, e.getMessage());
            callbackBuilder.build().reply(jsonConverter.toJson(JSONParser.createMessageWrapper(true, 422, "The user could not be authenticated, a wrong combination of credentials was provided.", e.getMessage())));
        } catch (JsonSyntaxException e) {
            System.out.printf("%s The json received contained incorrect syntax, sending rejection.\n", PREFIX);
            callbackBuilder.build().reply(jsonConverter.toJson(JSONParser.createMessageWrapper(true, 500, "Unknown error occurred.", "Syntax error when parsing json.")));
        }
    }

    /**
     * Checks if the variables for the remove pin card request are correctly specified and throws an exception if one
     * of the variables is not.
     * @param pinCardJson Json String representing a pin card that should be removed from the system.
     * @throws IncorrectInputException Thrown when a variable is incorrectly specified(or not specified at all).
     * @throws JsonSyntaxException Thrown when the json of the pinCard object is incorrect.
     */
    void verifyPinCardRemovalInput(final String pinCardJson) throws IncorrectInputException,
            JsonSyntaxException {
        PinCard pinCard = jsonConverter.fromJson(pinCardJson, PinCard.class);
        String accountNumber = pinCard.getAccountNumber();
        Long cardNumber = pinCard.getCardNumber();
        String pinCode = pinCard.getPinCode();
        if (accountNumber == null || accountNumber.length() != accountNumberLength) {
            throw new IncorrectInputException("The following variable was incorrectly specified: accountNumber.");
        }
        if (cardNumber == null) {
            throw new IncorrectInputException("The following variable was incorrectly specified: cardNumber.");
        }
        if (pinCode == null) {
            throw new IncorrectInputException("The following variable was incorrectly specified: pinCode.");
        }
    }

    /**
     * Forwards the pin card removal request to the authentication service, forwards the result to the request source
     * if the request is successful, or sends a rejection if it is not.
     * @param pinCardJson Json String representing a {@link PinCard} that should be removed from the system.
     * @param cookie Cookie of the user that sent the request.
     * @param callbackBuilder Used to forward the result of the request to the request source.
     */
    private void doPinCardRemovalRequest(final String pinCardJson, final String cookie,
                                         final CallbackBuilder callbackBuilder) {
        authenticationClient.putFormAsyncWith2Params("/services/authentication/card/remove",
                "pinCard", pinCardJson, "cookie", cookie, (code, contentType, body) -> {
                    if (code == HTTP_OK) {
                        MessageWrapper messageWrapper = jsonConverter.fromJson(JSONParser.removeEscapeCharacters(body), MessageWrapper.class);
                        if (!messageWrapper.isError()) {
                            sendPinCardRemovalCallback(body, callbackBuilder);
                        } else {
                            callbackBuilder.build().reply(body);
                        }
                    } else {
                        callbackBuilder.build().reply(jsonConverter.toJson(JSONParser.createMessageWrapper(true, 500, "An unknown error occurred.", "There was a problem with one of the HTTP requests")));
                    }
                });
    }

    private void sendPinCardRemovalCallback(final String jsonReply, final CallbackBuilder callbackBuilder) {
        System.out.printf("%s Pin card removal successful, sending callback.\n", PREFIX);
        callbackBuilder.build().reply(jsonReply);
    }






----- Authentication -----

/**
     * Creates a callbackBuilder for the request so that the result can be sent back to the request source and then
     * calls the exception handler for the request. Removes a pincard belonging to a customer.
     * @param callback Used to send the result of the request back to the request source.
     * @param pinCardJson Json String representing a {@link PinCard} that is to be removed from the system.
     * @param cookie Cookie of the user that sent the request.
     */
    @RequestMapping(value = "/card/remove", method = RequestMethod.PUT)
    public void processPinCardRemovalRequest(final Callback<String> callback,
                                         @RequestParam("pinCard") final String pinCardJson,
                                         @RequestParam("cookie") final String cookie) {
        CallbackBuilder callbackBuilder = CallbackBuilder.newCallbackBuilder().withStringCallback(callback);
        handlePinCardRemovalExceptions(pinCardJson, cookie, callbackBuilder);
    }

    /**
     * Tries to authenticate the user that sent the request, creates a {@link PinCard} object based on the request
     * json and then forwards the request with the customerId of the user that sent the request.
     * @param pinCardJson Json String representing a {@link PinCard} that should be removed from the system.
     * @param cookie Cookie of the user that sent the request.
     * @param callbackBuilder Used to send the result of the request back to the request source.
     */
    private void handlePinCardRemovalExceptions(final String pinCardJson, final String cookie,
                                                final CallbackBuilder callbackBuilder) {
        try {
            authenticateRequest(cookie);
            PinCard pinCard = jsonConverter.fromJson(pinCardJson, PinCard.class);
            pinCard.setCustomerId(getCustomerId(cookie));
            doPinCardRemovalRequest(jsonConverter.toJson(pinCard), callbackBuilder);
        } catch (SQLException e) {
            callbackBuilder.build().reply(jsonConverter.toJson(JSONParser.createMessageWrapper(true, 500, "Error connecting to authentication database.")));
        } catch (UserNotAuthorizedException e) {
            callbackBuilder.build().reply(jsonConverter.toJson(JSONParser.createMessageWrapper(true, 419, "The user is not authorized to perform this action.", "User does not appear to be logged in.")));
        }
    }

    /**
     * Forwards the pin card removal request to the pin service, forwards the result to the request source if the
     * request is successful, or sends a rejection to the request source if the request fails.
     * @param pinCardJson Json String representing a {@link PinCard} that should be removed from the system.
     * @param callbackBuilder Used to send the result of the request back to the request source.
     */
    private void doPinCardRemovalRequest(final String pinCardJson, final CallbackBuilder callbackBuilder) {
        pinClient.putFormAsyncWith1Param("/services/pin/card/remove",
                "pinCard", pinCardJson, (code, contentType, body) -> {
                    if (code == HTTP_OK) {
                        MessageWrapper messageWrapper = jsonConverter.fromJson(JSONParser.removeEscapeCharacters(body), MessageWrapper.class);
                        if (!messageWrapper.isError()) {
                            sendPinCardRemovalCallback(body, callbackBuilder);
                        } else {
                            callbackBuilder.build().reply(body);
                        }
                    } else {
                        callbackBuilder.build().reply(jsonConverter.toJson(JSONParser.createMessageWrapper(true, 500, "An unknown error occurred.", "There was a problem with one of the HTTP requests")));
                    }
                });
    }

    private void sendPinCardRemovalCallback(final String jsonReply, final CallbackBuilder callbackBuilder) {
        System.out.printf("%s Pin card removal successful, sending callback.\n", PREFIX);
        callbackBuilder.build().reply(jsonReply);
    }





----- Pin -----

/**
     * Creates a callbackbuilder to send the result of the request to and then calls the exception handler to execute
     * the pin card removal. Sends a callback if the removal is successful or a rejection if the removal fails.
     * @param callback Used to send the result of the request to the request source.
     * @param pinCardJson Json String representing a {@link PinCard} that should be removed from the system.
     */
    @RequestMapping(value = "/card/remove", method = RequestMethod.PUT)
    public void removePinCard(final Callback<String> callback, final @RequestParam("pinCard") String pinCardJson) {
        CallbackBuilder callbackBuilder = CallbackBuilder.newCallbackBuilder().withStringCallback(callback);
        handleRemovePinCardExceptions(pinCardJson, callbackBuilder);
    }

    /**
     * Tries to create a {@link PinCard} from the Json string and then delete it from the database. Sends a rejection
     * if this fails or a callback with the {@link PinCard} that was removed from the system if it is successful.
     * @param pinCardJson Json String representing a {@link PinCard} that should be removed from the system.
     * @param callbackBuilder Used to send the result of the request to the request source.
     */
    private void handleRemovePinCardExceptions(final String pinCardJson, final CallbackBuilder callbackBuilder) {
        try {
            PinCard pinCard = jsonConverter.fromJson(pinCardJson, PinCard.class);
            deletePinCardFromDatabase(pinCard);
            sendDeletePinCardCallback(pinCard, callbackBuilder);
        } catch (SQLException e) {
            callbackBuilder.build().reply(jsonConverter.toJson(JSONParser.createMessageWrapper(true, 500, "Error connecting to the Pin database.")));
        } catch (NumberFormatException e) {
            callbackBuilder.build().reply(jsonConverter.toJson(JSONParser.createMessageWrapper(true, 418, "One of the parameters has an invalid value.", "Something went wrong when parsing the customerId in Pin.")));
        }
    }

    /**
     * Deletes a pincard from the pin database.
     * @param pinCard Pin card that should be deleted from the database.
     * @throws SQLException Thrown when the sql query fails, will cause the removal request to be rejected.
     * @throws NumberFormatException Cause when a parameter is incorrectly specified, will cause the removal request
     * to be rejected.
     */
    void deletePinCardFromDatabase(final PinCard pinCard) throws SQLException, NumberFormatException {
        SQLConnection databaseConnection = databaseConnectionPool.getConnection();
        PreparedStatement removePinCard = databaseConnection.getConnection()
                                                            .prepareStatement(SQLStatements.removePinCard);
        removePinCard.setString(1, pinCard.getAccountNumber());
        removePinCard.setLong(2, pinCard.getCustomerId());
        removePinCard.setLong(3, pinCard.getCardNumber());
        removePinCard.setString(4, pinCard.getPinCode());
        removePinCard.execute();
        databaseConnection.close();
        databaseConnectionPool.returnConnection(databaseConnection);
    }

    private void sendDeletePinCardCallback(final PinCard pinCard, final CallbackBuilder callbackBuilder) {
        System.out.printf("%s Pin card #%s successfully deleted from the system, sending callback.\n", PREFIX, pinCard.getCardNumber());
        callbackBuilder.build().reply(jsonConverter.toJson(JSONParser.createMessageWrapper(false, 200, "Normal Reply", pinCard)));
    }